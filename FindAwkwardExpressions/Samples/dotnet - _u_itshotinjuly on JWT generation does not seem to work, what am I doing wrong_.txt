/u/itshotinjuly on JWT generation does not seem to work, what am I doing wrong?
Here's what I use (.net core 2.0). Hope this helps.   // Create JWT Token private JwtSecurityToken BuildJwtToken(ApplicationUser user, string clientId, DateTime now, TimeSpan expiration) { var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_tokenConfig.Key)); var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256); //add claims here var claims = new Claim[] { new Claim(JwtRegisteredClaimNames.Sub, user.Id), new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()), new Claim(JwtRegisteredClaimNames.Iat, new DateTimeOffset(now).ToUniversalTime().ToUnixTimeSeconds().ToString(), ClaimValueTypes.Integer64), new Claim(JwtRegisteredClaimNames.Exp, new DateTimeOffset(now).ToUniversalTime().Add(expiration).ToUnixTimeSeconds().ToString(), ClaimValueTypes.Integer64), new Claim(JwtRegisteredClaimNames.Email, user.Email), //new Claim(ClaimTypes.Name, user.UserName), new Claim("client_id", clientId), new Claim("email_confirmed", user.EmailConfirmed ? "true" : "false", ClaimValueTypes.Boolean) }; var jwt = new JwtSecurityToken( issuer: _tokenConfig.Issuer, audience: _tokenConfig.Audience, claims: claims, expires: now.Add(expiration), signingCredentials: creds ); return jwt; }  In startup.cs services:   services .AddAuthentication(options => { options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme; options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme; }) .AddJwtBearer(options => { //options.Authority = Configuration["Tokens:Issuer"]; options.RequireHttpsMetadata = true; options.SaveToken = true; options.TokenValidationParameters = new TokenValidationParameters { // The signing key must match! RequireSignedTokens = true, ValidateIssuerSigningKey = true, IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(Configuration["Tokens:Key"])), // Validate the JWT Issuer (iss) claim ValidateIssuer = true, ValidIssuer = Configuration["Tokens:Issuer"], // Validate the JWT Audience (aud) claim ValidateAudience = true, ValidAudience = Configuration["Tokens:Audience"], // Validate the token expiry ValidateLifetime = true, RequireExpirationTime = true, // If you want to allow a certain amount of clock drift, set that here: ClockSkew = TimeSpan.Zero }; });    