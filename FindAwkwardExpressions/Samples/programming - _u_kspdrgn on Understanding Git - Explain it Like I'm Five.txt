/u/kspdrgn on Understanding Git - Explain it Like I'm Five
Your guide is good, but I would try separating any command line syntax from the topics. Like you could cover the index, commits, fetch etc as concepts and then to the side have references to the actual commands. For example, a manager-type should know what branches and merges are, but will never touch the repo. And someone using a GUI client will just get distracted reading through the command line examples. Otherwise, I just have some rough notes from talking git at my company, maybe this perspective will help or feel free to TL;DR: How to prevent mistakes: Fetch to examine remote changes before pull/merging Code with commits in mind - did you really mean to touch that line? maybe that typo fix in an unrelated file should go in its own commit. separate code concerns into lines to minimize conflicts! Commit carefully where are you committing? should you be committing to a new branch instead? if this is a shared branch, have you fetched/pulled recently? renaming files: did the commit pick up that file you moved and renamed? did you make changes as well as rename? a commit with nothing but renames will have fewest conflicts! start with nothing staged and review everything as you stage it. stage by lines and hunks and files. separate commits by concerns. commit frequently, reorganize later. having atomic commits lets you manipulate and merge them without conflicts.  Backup your commits! before doing that big merge, backup your work by making another branch right where you are!  How to Fix Mistakes Amend Last Commit Reset (hard vs mixed vs soft) Cherry pick Rebase (same as reset + cherry pick) if rebasing a large stack, squash and groom first by rebasing in-place, then rebase onto remote. rebase iteratively instead of trying to edit every commit in one session. make some focused changes and the rebase again.  Push force always use --force-with-lease when force pushing    